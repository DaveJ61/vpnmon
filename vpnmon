#!/usr/bin/env python

################################################################
#
# vpnmon - A VPN connection monitor for Linux
#
# Whenever your VPN connection disconnects, vpnmon disables your 
# entire networking or runs a custom command of your choice.
# This tool requires Network Manager to be installed or else it
# would fail to function.
#
# Licensed under GNU General Public License version 2
#
################################################################

import sys
import traceback

import gobject

import dbus
import dbus.decorators
import dbus.mainloop.glib

import os
import argparse

class CatchallSignalHandler(object):
    """A functor that eliminates the need to access globals. Needed
    since dbus won't allow us to pass our own parameters."""
    
    def __init__(self, command):
        self.command = command
        
    def __call__(self, *args, **kwargs):
        # VPN disconnect (6) or failure (7)
        if args[0] >= 6: 
            print 'VPN disconnected.'
            if self.command is not None:
                run_command(self.command)
            else:
                disable_net()  

def get_argparser():
    parser = argparse.ArgumentParser(description='vpnmon - A VPN \
                                     connection monitor for Linux')
    parser.add_argument('--run-command', metavar='COMMAND', type=str,
                        help='run COMMAND when VPN connection drops,\
                        instead of disabling the network')
    return parser

def disable_net():
    print 'Disabling network...'
    os.system('nmcli -p nm enable false')

def run_command(command):
    print 'Running command...'
    os.system(command)
     
def main():
    # Take care of bad parameters and obtaining the command at once.
    # If any errors occur in the args the program will terminate here.
    command = get_argparser().parse_args().run_command

    catchall_signal_handler = CatchallSignalHandler(command)
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    print ("Monitoring your VPN connection...")
    bus = dbus.SystemBus()
    bus.add_signal_receiver(catchall_signal_handler,
                            signal_name='VpnStateChanged',
                            interface_keyword='dbus_interface',
                            member_keyword='member')
    loop = gobject.MainLoop()
    try:
        loop.run()
    except KeyboardInterrupt:
        print 'Exiting...'
        

if __name__ == '__main__':
    main()
